package cz.jaro.alarmmorning;

import android.os.Environment;
import android.util.Log;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Locale;

public class MyLog {

    public static boolean logToSyslog = true;
    public static boolean logToFile = BuildConfig.DEBUG;

    private static final String NEW_LINE = System.getProperty("line.separator");
    private static final File logFile;

    private static final String TAG = createLogTag(MyLog.class); // Tag of log records generated by this class
    private static final String SUFFIX_SYSLOG = "[AM]";

    // TODO Purge the log file after a while

    static {
        if (logToFile) {
            logFile = new File(Environment.getExternalStorageDirectory(), "AlarmMorning.log");
            if (!logFile.exists()) {
                try {
                    logFile.createNewFile();
                } catch (IOException e) {
                    Log.w(TAG, "Cannot create log file", e);
                }
            }
        } else {
            logFile = null;
        }
    }

    public static void v(String message) {
        v(null, message);
    }

    public static void v(String tag, String message) {
        v(tag, message, null);
    }

    public static void v(String message, Throwable tr) {
        v(null, message, tr);
    }

    public static void v(String TAG, String message, Throwable tr) {
        println(Log.VERBOSE, TAG, message, tr);
    }

    public static void d(String message) {
        d(null, message);
    }

    public static void d(String tag, String message) {
        d(tag, message, null);
    }

    public static void d(String message, Throwable tr) {
        d(null, message, tr);
    }

    public static void d(String TAG, String message, Throwable tr) {
        println(Log.DEBUG, TAG, message, tr);
    }

    public static void i(String message) {
        i(null, message);
    }

    public static void i(String tag, String message) {
        i(tag, message, null);
    }

    public static void i(String message, Throwable tr) {
        i(null, message, tr);
    }

    public static void i(String TAG, String message, Throwable tr) {
        println(Log.INFO, TAG, message, tr);
    }

    public static void w(String message) {
        w(null, message);
    }

    public static void w(String tag, String message) {
        w(tag, message, null);
    }

    public static void w(String message, Throwable tr) {
        w(null, message, tr);
    }

    public static void w(String TAG, String message, Throwable tr) {
        println(Log.WARN, TAG, message, tr);
    }

    public static void e(String message) {
        e(null, message);
    }

    public static void e(String tag, String message) {
        e(tag, message, null);
    }

    public static void e(String message, Throwable tr) {
        e(null, message, tr);
    }

    public static void e(String TAG, String message, Throwable tr) {
        println(Log.ERROR, TAG, message, tr);
    }

    private static synchronized void println(int priority, String tag, String message, Throwable tr) {
        String useTag = tag != null ? tag : constructTag();
        String useThrowable = tr != null ? stackTraceToString(tr) : "";

        // 1. Log to syslog
        if (logToSyslog) {
            Log.println(priority, useTag + SUFFIX_SYSLOG, message + (tr != null ? "\n" + useThrowable : ""));
        }

        // 2. Log to file
        if (logToFile) {
            final SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS", Locale.US);

            String line =
                    sdf.format(new Date()) +
                    " : " +
                    priorityToString(priority) +
                    " : " +
                    useTag +
                    " : " +
                    message +
                    NEW_LINE +
                    useThrowable;
            try {
                final FileWriter fileOut = new FileWriter(logFile, true);
                fileOut.append(line);
                fileOut.close();
            } catch (IOException e) {
                Log.w(TAG, "Cannot add record to log file", e);
            }
        }
    }

    public static String constructTag() {
        final int level = 7;

        StackTraceElement stackTraceElement = Thread.currentThread().getStackTrace()[level];

        String fileName = stackTraceElement.getFileName();
        if (fileName != null && fileName.endsWith(".java"))
            fileName = fileName.substring(0, fileName.length() - 5);

        return fileName + "." + stackTraceElement.getMethodName() + ":" + stackTraceElement.getLineNumber();
    }

    private static String stackTraceToString(Throwable tr) {
        StringWriter sw = new StringWriter();
        tr.printStackTrace(new PrintWriter(sw));
        return sw.toString();
    }

    private static String priorityToString(int priority) {
        if (priority == Log.VERBOSE)
            return "VERBOSE";
        if (priority == Log.DEBUG)
            return "DEBUG";
        if (priority == Log.INFO)
            return "INFO";
        if (priority == Log.WARN)
            return "WARN";
        if (priority == Log.ERROR)
            return "ERROR";
        if (priority == Log.ASSERT)
            return "ASSERT";

        throw new IllegalArgumentException("Unsupported priority " + priority);
    }

    private static String createLogTag(Class c) {
        return c.getSimpleName() + SUFFIX_SYSLOG;
    }
}
